var journey = require('./')
  , fs = require('fs')

var code = fs.readFileSync(process.argv[2], 'utf8')
var ast = journey.makeAst(code)
var statements = ast.statements
var functions = {}

var has = Function.prototype.call.bind(Object.prototype.hasOwnProperty)
function deepClone(obj) {
  if (typeof obj !== 'object') return obj
  if (obj === null) return null
  if (Array.isArray(obj)) return Array.prototype.slice.call(obj)
  var copy = {}
  for (var key in obj) if (has(obj, key)) copy[key] = obj[key]
  return copy
}

statements.forEach(function(stat) {
  if (stat.type === 'defun') {
    functions[stat.name] = stat
  }
})
var injections = {}
function firstFunction(parents) { return parents.filter(function(node) {return typeof node in {'defun':1, 'function':1}})[0] }
journey.visitAll(ast, function(node, parents) {
  if (node.type !== 'call') return
  if (node.func.type !== 'name') return
  var funcname = node.func.value
  if (!has(functions, funcname)) return
  var func = functions[funcname]
  if (parents.indexOf(func) !== -1) return // recursion!
  injections[funcname] = injections[funcname] || []
  var rootfunc = firstFunction(parents)
  if (injections[funcname].indexOf(rootfunc) !== -1) return
  injections[funcname].push(rootfunc)
})
Object.keys(injections).forEach(function(funcname) {
  injections[funcname].forEach(function(rootfunc) {
    rootfunc.body.push(functions[funcname])
  })
})
code = journey.stringifyAst(ast)
fs.writeFileSync(process.argv[3], 'utf8', code)
